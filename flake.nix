# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{

  # Flake inputs
  inputs = {
    baton.url = "github:conductorOne/baton";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
  };

  # Flake outputs that other flakes can use
  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
      baton,
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
        "aarch64-linux"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );

      helperScriptGetJWTTokenBody = ''
        set -e
        # Function to check if a variable is empty
        check_var() {
            local var_name="$1"
            local var_value="''${!var_name}"
            if [ -z "$var_value" ]; then
        	echo "Error: Environment variable '$var_name' is not set or is empty." >&2
        	exit 1
            fi
        }

        check_var "BATON_AZURE_CLIENT_ID"
        check_var "BATON_AZURE_CLIENT_SECRET"
        check_var "BATON_AZURE_TENANT_ID"

        curl -X POST -d \
             "client_id=$BATON_AZURE_CLIENT_ID&scope=https://''${BATON_AZURE_GRAPH_DOMAIN:-graph.microsoft.com}/.default&client_secret=$BATON_AZURE_CLIENT_SECRET&grant_type=client_credentials" \
             https://login.microsoftonline.com/$BATON_AZURE_TENANT_ID/oauth2/v2.0/token
      '';
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {
            # Pinned packages available in the environment
            packages = with pkgs; [
              go
              nil
              gomodifytags
              curl
              jq

              baton.packages.${pkgs.system}.default

              # writes a script and make it available in $PATH
              (pkgs.writeShellScriptBin "baton-get-jwt-token" helperScriptGetJWTTokenBody)
            ];

            # Environment variables
            env = {
              BATON_DEBUG_PRINT_RESPONSE_BODY = ""; # use non-empty value to activate
            };
          };
        }
      );
    };
}
