# This flake was initially generated by fh, the CLI for FlakeHub (version 0.1.22)
{

  # Flake inputs
  inputs = {
    baton.url = "github:conductorOne/baton";
    flake-schemas.url = "https://flakehub.com/f/DeterminateSystems/flake-schemas/*";

    nixpkgs.url = "https://flakehub.com/f/NixOS/nixpkgs/*";
  };

  # Flake outputs that other flakes can use
  outputs =
    {
      self,
      flake-schemas,
      nixpkgs,
      baton,
    }:
    let
      # Helpers for producing system-specific outputs
      supportedSystems = [
        "x86_64-linux"
        "aarch64-darwin"
        "x86_64-darwin"
        "aarch64-linux"
      ];
      forEachSupportedSystem =
        f:
        nixpkgs.lib.genAttrs supportedSystems (
          system:
          f {
            pkgs = import nixpkgs { inherit system; };
          }
        );
    in
    {
      # Schemas tell Nix about the structure of your flake's outputs
      schemas = flake-schemas.schemas;

      # Development environments
      devShells = forEachSupportedSystem (
        { pkgs }:
        {
          default = pkgs.mkShell {
            # Pinned packages available in the environment
            packages = with pkgs; [
              go
              nil
              gomodifytags
              curl
              jq
              toybox
              delve
              gdlv

              baton.packages.${pkgs.system}.default

              # writes a script and make it available in $PATH
              (pkgs.writeShellScriptBin "baton-get-jwt" (builtins.readFile ./scripts/get-microsoft-graph-jwt.sh))

              (pkgs.writeShellScriptBin "baton-generate-pfx-cert" (
                builtins.readFile ./scripts/generate-self-signed-certificate.sh
              ))

              (pkgs.writeShellScriptBin "baton-get-sharepoint-bearer-token" (
                builtins.readFile ./scripts/get-sharepoint-bearer-token.sh
              ))
            ];

            # Environment variables
            env = {
              BATON_DEBUG_PRINT_RESPONSE_BODY = ""; # use non-empty value to activate
            };
          };
        }
      );
    };
}
