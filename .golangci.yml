version: "2"

formatters:
  enable:
    - gofumpt
    - golines
  exclusions:
    generated: lax # sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    paths:
      - vendor/
      - third_party$
      - builtin$
      - examples$
  settings:
    gofumpt: # instead of gofmt
      extra-rules: true # see https://github.com/mvdan/gofumpt?tab=readme-ov-file#added-rules
    golines:
      max-len: 200
      shorten-comments: true # Shorten single-line comments
      chain-split-dots: true # Split chained methods on the dots as opposed to the arguments.

linters:
  default: none
  enable:
    - asasalint # Check for pass []any as any in variadic func(...any)
    - asciicheck # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk # Checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - durationcheck # check for two durations multiplied together
    - errcheck # Errcheck is a program for checking for unchecked errors in go programs. These unchecked errors can be critical bugs in some cases
    - errorlint # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - exhaustive # check exhaustiveness of enum switch statements
    - forbidigo # Forbids identifiers
    - gochecknoinits # Checks that no init functions are present in Go code
    - goconst # Finds repeated strings that could be replaced by a constant
    - gocritic # Provides diagnostics that check for bugs, performance and style issues.
    - godot # Check if comments end in a period
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - gosec # Inspects source code for security problems
    - govet # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # Detects when assignments to existing variables are not used
    - nakedret # Finds naked returns in functions greater than a specified function length
    - nilerr # Finds the code that returns nil even if it checks that the error is not nil.
    - noctx # noctx finds sending http request without context.Context
    - nolintlint # Reports ill-formed or insufficient nolint directives
    - nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL.
    - predeclared # find code that shadows one of Go's predeclared identifiers
    - revive # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - staticcheck # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - tparallel # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert # Remove unnecessary type conversions
    - unused # Checks Go code for unused constants, variables, functions and types
    - usestdlibvars # detect the possibility to use variables/constants from the Go standard library
    - usetesting # replaces tenv. it's an analyzer that detects using os.Setenv instead of t.Setenv since Go1.17
    - whitespace # Tool for detection of leading and trailing whitespace
  settings:
    exhaustive:
      default-signifies-exhaustive: true
    gocritic:
      enabled-checks:
        - ruleguard
      # The list of supported checkers can be found at https://go-critic.github.io/overview.
      settings:
        ruleguard:
          rules: ${base-path}/tools/rules.go
        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          skipRecvDeref: false
    govet:
      disable:
        - fieldalignment # too strict
        - shadow # complains too much about shadowing errors. All research points to this being fine.
      enable-all: true
    nolintlint:
      require-explanation: true
      require-specific: true
      allow-no-explanation:
        - forbidigo
        - tracecheck
        - gomnd
        - gochecknoinits
        - makezero
    revive:
      severity: error
      rules:
        - name: atomic
        - name: line-length-limit
          arguments:
            - 200
        # These are functions that we use without checking the errors often. Most of these can't return an error even
        # though they implement an interface that can.
        - name: unhandled-error
          arguments:
            - fmt.Printf
            - fmt.Println
            - fmt.Fprint
            - fmt.Fprintf
            - fmt.Fprintln
            - os.Stderr.Sync
            - sb.WriteString
            - buf.WriteString
            - hasher.Write
            - os.Setenv
            - os.RemoveAll
        - name: var-naming
          arguments:
            - - ID
              - URL
              - HTTP
              - API
            - []
  exclusions:
    generated: lax
    presets:
      - comments
      - common-false-positives
      - legacy
      - std-error-handling
    rules:
      - linters:
          - godot # Don't require TODO, NOTE, FIXME, HACK comments to end in a period
        source: (TODO|NOTE|FIXME|HACK)
    paths:
      - third_party$
      - builtin$
      - examples$
      - vendor/
issues:
  max-same-issues: 50
